'Transposes Data to both Vertical and Horizontal
Sub Array_OneDimension() 

    Dim MonthArray(1 To 12) As String
    Dim i As Byte
    Dim r As Long
    Dim StartRow As Long
    
    'Fill up the month array
    For i = 1 To 12
        'MonthArray(i) = Range("A" & 4 + i).Value
        'my months is a named range
        MonthArray(i) = Range("MyMonths").Cells(i, 1).Value ' You need to create "MyMonths" in Name Managers
    Next i
        'example of writing the array back to Excel
        Range("C5:N5").Value = MonthArray
        'example of writing the array back vertically - it needs to be transposed
        Range("C5:C16").Value = Application.WorksheetFunction.Transpose(MonthArray)
        
       ' MsgBox "Array element for position 3 is: " & MonthArray(3)

        ' Create a report that leaves out 4 rows between each month
        For i = LBound(MonthArray) To UBound(MonthArray)
            Range("E7").Offset(r).Value = MonthArray(i)
            r = r + 5
        Next i
End Sub

' Creates a New Worksheet per Column Title with Specific Info
Sub Manager_Report() 

    Dim CompInfo(1 To 8, 1 To 3) As String
    Dim r As Byte, c As Byte
    Const StartRow As Long = 6
    Dim NewBook As Workbook
    Dim ShNew As Worksheet
    
    For r = 1 To 8
        For c = 1 To 3
            CompInfo(r, c) = Cells(r + StartRow, c).Value
        Next c
    Next r
    
    Set NewBook = Workbooks.Add
    'reuse r for worksheets
    For r = 1 To 8
        Set ShNew = NewBook.Worksheets.Add
        ShNew.Name = CompInfo(r, 1)
        ShNew.Range("A1").Value = CompInfo(r, 1)
        ShNew.Range("A2").Value = CompInfo(r, 2)
        ShNew.Range("A3").Value = CompInfo(r, 3)
        
    Next r
End Sub

' Check if File Exists
Sub File_Exists()
    Dim FileName As String
    'Update the path to a valid path on your PC
    FileName = VBA.FileSystem.Dir("C:\Users\Jae\Desktop\Others\Stock List.xlsx")
    If FileName = VBA.Constants.vbNullString Then
        MsgBox "file does not exist."
    Else
        ' Update the path to a valid path on your PC
        Workbooks.Open "C:\Users\Jae\Desktop\Others\" & FileName
        
    End If
End Sub

' Check if Folder Exists
Sub Path_Exists()
    Dim Path As String
    Dim Folder As String
    Dim Answer As VbMsgBoxResult
    'Update the path to a valid path on your PC
    Path = "C:\Users\Jae\Desktop\Others"
    Folder = Dir(Path, vbDirectory)
    
    If Folder = vbNullString Then
        Answer = MsgBox("Path does not exist. Would you like to create it?", vbYesNo, "Create Path?")
        Select Case Answer
            Case vbYes
                VBA.FileSystem.MkDir (Path)
            Case Else
                Exit Sub
        End Select
    Else
        MsgBox "Folder exists."
        
    End If
End Sub

' Copies Data from selected file
Sub Get_Data_From_File()

     'Note: In the Regional Project that's coming up we learn how to import data from multiple Excel workbooks
    ' Also see BONUS sub procedure below (Bonus_Get_Data_From_File_InputBox()) that expands on this by inlcuding an input box
    Dim FileToOpen As Variant
    Dim OpenBook As Workbook
    Application.ScreenUpdating = False
    FileToOpen = Application.GetOpenFilename(Title:="Browse for your File & Import File", FileFilter:="Excel Files (*.xls*),*xls*")
    If FileToOpen <> False Then
        Set OpenBook = Application.Workbooks.Open(FileToOpen)
         'copy data from A1 to E20 from first sheet
        OpenBook.Sheets(1).Range("A1:E20").Copy
        ThisWorkbook.Worksheets("SelectFile").Range("A10").PasteSpecial xlPasteValues
        OpenBook.Close False
        
    End If
    Application.ScreenUpdating = True
End Sub

' Create a .csv file from Excel Data
Sub Save_as_CSV()
    
    Dim NewBook As Workbook
    Dim FileName As String
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    FileName = Application.ThisWorkbook.Path & "\TestTextCSV.csv"
    Set NewBook = Workbooks.Add
    ShCSV.Copy before:=NewBook.Sheets(1)
    With NewBook
        .Sheets(1).Rows("1:3").Delete
        .SaveAs FileName:=FileName, FileFormat:=Excel.xlCSV
        .Close
        
    End With
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    MsgBox "Your CSV file was exported to the same directory as this workbook.", vbInformation
    
End Sub

' Create a .csv file from Excel Data
Sub Save_as_CSV()
    
    Dim NewBook As Workbook
    Dim FileName As String
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    FileName = Application.ThisWorkbook.Path & "\TestedCSVofJC.csv"
    Set NewBook = Workbooks.Add
    Sheet8.Copy before:=NewBook.Sheets(1)
    With NewBook
        .Sheets(1).Rows("1:3").Delete
        .SaveAs FileName:=FileName, FileFormat:=Excel.xlCSV
        .Close
        
    End With
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    MsgBox "Your CSV file was exported to the same directory as this workbook.", vbInformation
    
End Sub

' Save what you wrote here as text file
Sub Simple_TextFile()
    Dim FileName As String
    FileName = ThisWorkbook.Path & "\TestTextFile.txt"
    Open FileName For Output As #1
    Print #1, "Print line 1"
    Write #1, "Print line 2"
    Print #1, 1
    Write #1, 2
    Print #1, Range("A1").Value
    Write #1, Range("A1").Value
    
    Close #1
End Sub

' Copies Data From Sheet Name of the Selected File
Sub Bonus_Get_Data_From_File_InputBox()
    
    Dim FileToOpen As Variant
    Dim OpenBook As Workbook
    Dim ShName As String
    Dim Sh As Worksheet
    On Error GoTo Handle:
    
    FileToOpen = Application.GetOpenFilename(Title:="Browse for your File & Import Range", FileFilter:="Excel Files (*.xls*),*.xls*")
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    If FileToOpen <> False Then
        Set OpenBook = Application.Workbooks.Open(FileToOpen)
        ShName = Application.InputBox("Enter the sheet name to copy", "Enter the sheet name to copy")
        For Each Sh In OpenBook.Worksheets
            If UCase(Sh.Name) Like "*" & UCase(ShName) & "*" Then
                ShName = Sh.Name
            End If
        Next Sh

        'copy data from the specified sheet to this workbook - updae range as you see fit
        OpenBook.Sheets(ShName).Range("A1:CF1100").Copy
        ThisWorkbook.ActiveSheet.Range("A10").PasteSpecial xlPasteValues
        OpenBook.Close False
    End If
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Exit Sub
Handle:
    If Err.Number = 9 Then
        MsgBox "The sheet name does not exist. Please check spelling"
    Else
        MsgBox "An error has occurred."
    End If
    OpenBook.Close False
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub

Sub Export_to_File()
    Dim FileName As String
    Dim ExpRange As Range
    Dim ExpRow As Range
    Dim Expcell As Range
    Dim myValue As Variant
    
    ' Change File Name Here
    FileName = ThisWorkbook.Path & "\OhNo.csv"
    Open FileName For Output As #1
     'set full range but as rows to be able to loop through each row
    Set ExpRange = Sheet7.Range("A6").CurrentRegion.Rows
     'for each single row
    For Each ExpRow In ExpRange
         'for each single cell in the row
        For Each Expcell In ExpRow.Cells
            myValue = myValue & Expcell.Value & "-"
        Next Expcell
            myValue = Left(myValue, Len(myValue) - 1)

        Print #1, myValue
        myValue = ""
    Next ExpRow
    Close #1
    'Change File Name Here
    MsgBox "Your Text File (OhNo.csv) has been created in the same directory as this Worbkook.", vbInformation, "Well Done!"
    
End Sub
